# auto_processor.py
# Logic t·ª± ƒë·ªông x·ª≠ l√Ω file tr√πng l·∫∑p v√† t∆∞∆°ng t·ª±

import os
import shutil
from typing import List, Dict, Any, Tuple, Optional
from send2trash import send2trash

class AutoProcessor:
    """X·ª≠ l√Ω t·ª± ƒë·ªông file tr√πng l·∫∑p v√† t∆∞∆°ng t·ª±"""
    
    def __init__(self):
        self.processed_count = 0
        self.deleted_count = 0
        self.renamed_count = 0
        self.errors = []
    
    def process_all_groups(self, groups: List[Dict[str, Any]]) -> Dict[str, Any]:
        """X·ª≠ l√Ω t·∫•t c·∫£ c√°c nh√≥m"""
        self.processed_count = 0
        self.deleted_count = 0
        self.renamed_count = 0
        self.errors = []
        
        duplicate_groups = []
        similar_groups = []
        
        # Ph√¢n lo·∫°i nh√≥m
        for group in groups:
            if group.get('type') == 'duplicate':
                duplicate_groups.append(group)
            else:
                similar_groups.append(group)
        
        # X·ª≠ l√Ω file tr√πng l·∫∑p
        for group in duplicate_groups:
            try:
                self._process_duplicate_group(group)
            except Exception as e:
                self.errors.append(f"L·ªói x·ª≠ l√Ω nh√≥m tr√πng l·∫∑p: {e}")
        
        # X·ª≠ l√Ω file t∆∞∆°ng t·ª±
        for i, group in enumerate(similar_groups, 1):
            try:
                self._process_similar_group(group, i)
            except Exception as e:
                self.errors.append(f"L·ªói x·ª≠ l√Ω nh√≥m t∆∞∆°ng t·ª± {i}: {e}")
        
        return {
            'processed_groups': len(groups),
            'deleted_files': self.deleted_count,
            'renamed_files': self.renamed_count,
            'errors': self.errors
        }
    
    def _process_duplicate_group(self, group: Dict[str, Any]):
        """X·ª≠ l√Ω nh√≥m file tr√πng l·∫∑p - gi·ªØ l·∫°i file t·ªët nh·∫•t"""
        files = group.get('files', [])
        if len(files) < 2:
            return
        
        # Chuy·ªÉn ƒë·ªïi files th√†nh danh s√°ch ƒë∆∞·ªùng d·∫´n v·ªõi validation t·ªët h∆°n
        file_paths = []
        for file_info in files:
            path = None
            
            if isinstance(file_info, dict):
                path = file_info.get('path', '')
            elif isinstance(file_info, str):
                path = file_info
            else:
                continue
            
            # Normalize path v√† ki·ªÉm tra t·ªìn t·∫°i
            if path:
                try:
                    normalized_path = os.path.normpath(os.path.abspath(path))
                    if os.path.exists(normalized_path) and os.path.isfile(normalized_path):
                        file_paths.append(normalized_path)
                        print(f"üìÅ T√¨m th·∫•y file: {os.path.basename(normalized_path)}")
                    else:
                        print(f"‚ö†Ô∏è File kh√¥ng t·ªìn t·∫°i: {path}")
                except Exception as e:
                    print(f"‚ùå L·ªói x·ª≠ l√Ω ƒë∆∞·ªùng d·∫´n {path}: {e}")
        
        if len(file_paths) < 2:
            print(f"‚ö†Ô∏è Nh√≥m tr√πng l·∫∑p ch·ªâ c√≥ {len(file_paths)} file h·ª£p l·ªá, b·ªè qua")
            return
        
        # T√¨m file t·ªët nh·∫•t ƒë·ªÉ gi·ªØ l·∫°i
        best_file = self._find_best_file_from_paths(file_paths)
        if not best_file:
            print("‚ùå Kh√¥ng th·ªÉ x√°c ƒë·ªãnh file t·ªët nh·∫•t")
            return
        
        print(f"üèÜ File t·ªët nh·∫•t: {os.path.basename(best_file)}")
        
        # X√≥a c√°c file c√≤n l·∫°i
        deleted_files = []
        for file_path in file_paths:
            if file_path != best_file:
                try:
                    # Ki·ªÉm tra l·∫ßn cu·ªëi tr∆∞·ªõc khi x√≥a
                    if os.path.exists(file_path) and os.path.isfile(file_path):
                        send2trash(file_path)
                        self.deleted_count += 1
                        deleted_files.append(os.path.basename(file_path))
                        print(f"‚úÖ ƒê√£ x√≥a: {os.path.basename(file_path)}")
                    else:
                        print(f"‚ö†Ô∏è File ƒë√£ kh√¥ng t·ªìn t·∫°i: {os.path.basename(file_path)}")
                except Exception as e:
                    error_msg = f"Kh√¥ng th·ªÉ x√≥a {os.path.basename(file_path)}: {str(e)}"
                    self.errors.append(error_msg)
                    print(f"‚ùå {error_msg}")
        
        if deleted_files:
            print(f"üîÑ Nh√≥m tr√πng l·∫∑p: Gi·ªØ l·∫°i {os.path.basename(best_file)}, ƒë√£ x√≥a {len(deleted_files)} file")
        else:
            print(f"‚ö†Ô∏è Kh√¥ng x√≥a ƒë∆∞·ª£c file n√†o trong nh√≥m tr√πng l·∫∑p")
    
    def _process_similar_group(self, group: Dict[str, Any], group_number: int):
        """X·ª≠ l√Ω nh√≥m file t∆∞∆°ng t·ª± - ƒë·ªïi t√™n theo pattern"""
        files = group.get('files', [])
        if len(files) < 2:
            return
        
        # Chuy·ªÉn ƒë·ªïi files th√†nh danh s√°ch ƒë∆∞·ªùng d·∫´n
        file_paths = []
        for file_info in files:
            if isinstance(file_info, dict):
                path = file_info.get('path', '')
            else:
                path = str(file_info)
            
            if path and os.path.exists(path):
                file_paths.append(path)
        
        # ƒê·ªïi t√™n c√°c file trong nh√≥m
        for i, file_path in enumerate(file_paths, 1):
            try:
                new_path = self._generate_new_name(file_path, group_number, i)
                if new_path != file_path:
                    os.rename(file_path, new_path)
                    self.renamed_count += 1
                    print(f"üìù ƒê·ªïi t√™n: {os.path.basename(file_path)} ‚Üí {os.path.basename(new_path)}")
            except Exception as e:
                self.errors.append(f"Kh√¥ng th·ªÉ ƒë·ªïi t√™n {os.path.basename(file_path)}: {e}")
        
        print(f"üéØ Nh√≥m t∆∞∆°ng t·ª± {group_number}: ƒê√£ ƒë·ªïi t√™n {len(file_paths)} files")
    
    def _find_best_file_from_paths(self, file_paths: List[str]) -> 'Optional[str]':
        """T√¨m file t·ªët nh·∫•t ƒë·ªÉ gi·ªØ l·∫°i d·ª±a tr√™n ti√™u ch√≠"""
        best_file = None
        best_score = -1
        
        for file_path in file_paths:
            if not os.path.exists(file_path):
                continue
            
            score = self._calculate_file_score(file_path)
            if score > best_score:
                best_score = score
                best_file = file_path
        
        if best_file:
            return best_file
        elif file_paths:
            return file_paths[0]
        else:
            return None
    
    def _calculate_file_score(self, file_path: str) -> float:
        """T√≠nh ƒëi·ªÉm cho file d·ª±a tr√™n c√°c ti√™u ch√≠"""
        score = 0.0
        
        try:
            # Ti√™u ch√≠ 1: K√≠ch th∆∞·ªõc file (l·ªõn h∆°n = t·ªët h∆°n)
            file_size = os.path.getsize(file_path)
            score += file_size / (1024 * 1024)  # MB
            
            # Ti√™u ch√≠ 2: ƒê·ªô d√†i t√™n file (d√†i h∆°n = chi ti·∫øt h∆°n)
            filename = os.path.basename(file_path)
            name_without_ext = os.path.splitext(filename)[0]
            score += len(name_without_ext) * 0.1
            
            # Ti√™u ch√≠ 3: Kh√¥ng c√≥ s·ªë trong t√™n (∆∞u ti√™n file g·ªëc)
            if not any(char.isdigit() for char in name_without_ext):
                score += 5.0
            
            # Ti√™u ch√≠ 4: Kh√¥ng c√≥ t·ª´ kh√≥a copy, duplicate
            lower_name = name_without_ext.lower()
            if 'copy' not in lower_name and 'duplicate' not in lower_name and 'dup' not in lower_name:
                score += 3.0
            
            # Ti√™u ch√≠ 5: ƒê·ªãnh d·∫°ng file (∆∞u ti√™n JPG > PNG > kh√°c)
            ext = os.path.splitext(file_path)[1].lower()
            try:
                from speed_config import SpeedConfig
                jpg_exts = {'.jpg', '.jpeg'}
                if ext in jpg_exts:
                    score += 2.0
                elif ext in {'.png'}:
                    score += 1.0
                # Give slight bonus for supported image formats
                if ext in set(SpeedConfig.SUPPORTED_IMAGE_EXTENSIONS):
                    score += 0.5
            except Exception:
                if ext in ['.jpg', '.jpeg']:
                    score += 2.0
                elif ext == '.png':
                    score += 1.0
            
        except Exception:
            score = 0.0
        
        return score
    
    def _generate_new_name(self, file_path: str, group_number: int, file_index: int) -> str:
        """T·∫°o t√™n m·ªõi cho file theo pattern group(index)"""
        directory = os.path.dirname(file_path)
        filename = os.path.basename(file_path)
        name, ext = os.path.splitext(filename)
        
        # T·∫°o t√™n m·ªõi theo pattern: group_number(file_index)
        new_name = f"{group_number}({file_index}){ext}"
        new_path = os.path.join(directory, new_name)
        
        # Ki·ªÉm tra xem t√™n m·ªõi ƒë√£ t·ªìn t·∫°i ch∆∞a
        counter = 1
        while os.path.exists(new_path):
            new_name = f"{group_number}({file_index})_{counter}{ext}"
            new_path = os.path.join(directory, new_name)
            counter += 1
        
        return new_path
    
    def get_summary(self) -> str:
        """L·∫•y t√≥m t·∫Øt k·∫øt qu·∫£ x·ª≠ l√Ω"""
        summary = f"""
üéâ T·ª∞ ƒê·ªòNG X·ª¨ L√ù HO√ÄN T·∫§T

‚úÖ K·∫øt qu·∫£:
   ‚Ä¢ ƒê√£ x√≥a: {self.deleted_count} file tr√πng l·∫∑p
   ‚Ä¢ ƒê√£ ƒë·ªïi t√™n: {self.renamed_count} file t∆∞∆°ng t·ª±
   ‚Ä¢ T·ªïng x·ª≠ l√Ω: {self.deleted_count + self.renamed_count} file

"""
        
        if self.errors:
            summary += f"‚ö†Ô∏è L·ªói ({len(self.errors)}):\n"
            for error in self.errors[:5]:  # Hi·ªÉn th·ªã t·ªëi ƒëa 5 l·ªói
                summary += f"   ‚Ä¢ {error}\n"
            if len(self.errors) > 5:
                summary += f"   ‚Ä¢ ... v√† {len(self.errors) - 5} l·ªói kh√°c\n"
        
        return summary.strip()

# Global processor instance
auto_processor = AutoProcessor()
